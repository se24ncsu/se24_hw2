name: Python workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  contents: write
jobs:
  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - run: |
            python -m pip install --upgrade pip
            pip install pylint

      - id: pylint
        run: pylint **/*.py || true 

  pyright:
    name: Pyright
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install -g pyright

      - id: pyright
        run: pyright || true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    needs: [pylint, pyright]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - run: |
            python -m pip install --upgrade pip
            pip install pytest pytest-cov

      - run: |
            pytest --cov=. --cov-report xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  generate-badges:
    name: Generate Badges
    runs-on: ubuntu-latest
    needs: coverage
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          python -m pip install --upgrade pip
          pip install pylint
          npm install -g pyright

      - name: Generate badge URLs
        id: generate_badges
        run: |
          # Debugging step to ensure the file is present
          echo "Checking coverage XML file..."
          if [ -f coverage.xml ]; then
            echo "Coverage file exists"
          else
            echo "Coverage file does not exist"
            exit 1
          fi
          
          coverage=$(xmllint --xpath "string(//coverage/@line-rate)" coverage.xml)
          coverage_percentage=$(echo "scale=0; $coverage * 100" | bc)
          
          pylint_score=$(pylint **/*.py | grep 'rated' | awk '{print $6}' | cut -d'/' -f1)
          pylint_color="green"
          if (( $(echo "$pylint_score < 10" | bc -l) )); then
            pylint_color="red"
          fi
          pylint_badge="https://img.shields.io/badge/pylint-${pylint_score}-${pylint_color}"

          pyright_output=$(pyright --outputjson)
          pyright_score=$(echo "$pyright_output" | jq -r '.score')
          pyright_color="green"
          if [[ "$pyright_score" == "0" || "$pyright_score" == "" ]]; then
            pyright_color="red"
          fi
          pyright_badge="https://img.shields.io/badge/pyright-${pyright_score}-${pyright_color}"

          coverage=$(xmllint --xpath "string(//coverage/@line-rate)" coverage.xml)
          coverage_percentage=$(echo "scale=0; $coverage * 100" | bc)
          # Gradient from red to green
          if (( $(echo "$coverage_percentage >= 97" | bc -l) )); then
          coverage_color="green"
          elif (( $(echo "$coverage_percentage >= 90" | bc -l) )); then
            coverage_color="orange"
          else
            coverage_color="red"
          fi

          coverage_badge="https://img.shields.io/badge/coverage-${coverage_percentage}%25-${coverage_color}"
          echo "coverage_badge=$coverage_badge" >> $GITHUB_ENV
          echo "pylint_badge=$pylint_badge" >> $GITHUB_ENV
          echo "pyright_badge=$pyright_badge" >> $GITHUB_ENV

      - name: Update README with badges
        run: |
          sed -i '/\[Test Coverage: pytest-cov\]/c\![Test Coverage: pytest-cov](${{ env.coverage_badge }})' README.md
          sed -i '/\[Pylint\]/c\![Pylint](${{ env.pylint_badge }})' README.md
          sed -i '/\[Pyright\]/c\![Pyright](${{ env.pyright_badge }})' README.md


      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: git
