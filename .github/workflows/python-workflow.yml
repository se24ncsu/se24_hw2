name: Python workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  pylint:
    name: Pylint
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - run: |
          python -m pip install --upgrade pip
          pip install pylint

      - id: pylint
        run: pylint **/*.py || true

  pyright:
    name: Pyright
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - run: npm install -g pyright

      - id: pyright
        run: pyright --outputjson || true

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
    needs: [pylint, pyright]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - run: |
          pytest --cov=source --cov-report xml || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  generate-badges:
    name: Generate Badges
    runs-on: ubuntu-latest
    needs: coverage
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v3

      - name: Download coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage-report

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          python -m pip install --upgrade pip
          pip install pylint pytest pytest-cov
          npm install -g pyright

      - name: Generate badge URLs
        id: generate_badges
        run: |
          # Pylint
          pylint_output=$(pylint **/*.py 2>&1) || true
          pylint_exit_code=$?
          echo "Pylint exit code: $pylint_exit_code"
          echo "Pylint output: $pylint_output"
          
          pylint_score=$(echo "$pylint_output" | grep -oP '(?<=rated at )\d+\.\d+' | tail -1)
          pylint_score=${pylint_score:-0}
          echo "Pylint score: $pylint_score"
          
          if (( $(echo "$pylint_score < 5" | bc -l) )) || [ $pylint_exit_code -ne 0 ]; then
            pylint_color="red"
          elif (( $(echo "$pylint_score < 8" | bc -l) )); then
            pylint_color="orange"
          else
            pylint_color="green"
          fi
          pylint_badge="https://img.shields.io/badge/pylint-${pylint_score}-${pylint_color}"
          echo "Pylint badge: $pylint_badge"

          # Pyright
          pyright_output=$(pyright --outputjson 2>&1) || true
          pyright_exit_code=$?
          echo "Pyright exit code: $pyright_exit_code"
          echo "Pyright output: $pyright_output"
          
          if [ $pyright_exit_code -eq 0 ]; then
            error_count=$(echo "$pyright_output" | jq -r '.summary.errorCount')
            if [[ "$error_count" == "0" ]]; then
              pyright_score="passing"
              pyright_color="green"
            else
              pyright_score="failing"
              pyright_color="red"
            fi
          else
            pyright_score="error"
            pyright_color="red"
          fi
          pyright_badge="https://img.shields.io/badge/pyright-${pyright_score}-${pyright_color}"
          echo "Pyright badge: $pyright_badge"

          # Coverage and Pytest
          pytest_output=$(pytest --cov=source --cov-report xml 2>&1) || true
          pytest_exit_code=$?
          echo "Pytest exit code: $pytest_exit_code"
          echo "Pytest output: $pytest_output"
          
          if [ -f coverage.xml ]; then
            coverage=$(xmllint --xpath "string(//coverage/@line-rate)" coverage.xml)
            coverage_percentage=$(echo "scale=0; $coverage * 100" | bc)
            if (( $(echo "$coverage_percentage >= 97" | bc -l) )); then
              coverage_color="green"
            elif (( $(echo "$coverage_percentage >= 90" | bc -l) )); then
              coverage_color="orange"
            else
              coverage_color="red"
            fi
          else
            coverage_percentage="0"
            coverage_color="red"
          fi
          coverage_badge="https://img.shields.io/badge/coverage-${coverage_percentage}%25-${coverage_color}"
          echo "Coverage badge: $coverage_badge"

          if [ $pytest_exit_code -eq 0 ]; then
            test_status="passing"
            test_color="green"
          else
            test_status="failing"
            test_color="red"
          fi
          test_badge="https://img.shields.io/badge/tests-${test_status}-${test_color}"
          echo "Test badge: $test_badge"

          echo "pylint_badge=$pylint_badge" >> $GITHUB_ENV
          echo "pyright_badge=$pyright_badge" >> $GITHUB_ENV
          echo "coverage_badge=$coverage_badge" >> $GITHUB_ENV
          echo "test_badge=$test_badge" >> $GITHUB_ENV

      - name: Update README with badges
        env:
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          sed -i '/\[Test Coverage: pytest-cov\]/c\[![Test Coverage: pytest-cov](${{ env.coverage_badge }})](${{ env.RUN_URL }})' README.md
          sed -i '/\[Pylint\]/c\[![Pylint](${{ env.pylint_badge }})](${{ env.RUN_URL }})' README.md
          sed -i '/\[Pyright\]/c\[![Pyright](${{ env.pyright_badge }})](${{ env.RUN_URL }})' README.md
          sed -i '/\[Tests\]/c\[![Tests](${{ env.test_badge }})](${{ env.RUN_URL }})' README.md

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: git
          author_email: git@example.com
          message: Update badges in README